% Generated by roxygen2 (4.0.2): do not edit by hand
\name{to_geo_list}
\alias{to_geo_list}
\alias{to_geo_list.SpatialPointsDataFrame}
\alias{to_geo_list.SpatialPolygons}
\alias{to_geo_list.SpatialPolygonsDataFrame}
\alias{to_geo_list.data.frame}
\alias{to_geo_list.list}
\alias{to_geo_list.numeric}
\title{Convert many input types with spatial data to geojson specified as a list}
\usage{
to_geo_list(...)

\method{to_geo_list}{SpatialPolygons}(input)

\method{to_geo_list}{SpatialPolygonsDataFrame}(input)

\method{to_geo_list}{SpatialPointsDataFrame}(input)

\method{to_geo_list}{numeric}(input, polygon = NULL)

\method{to_geo_list}{data.frame}(input, lat = "latitude", lon = "longitude",
  polygon = NULL)

\method{to_geo_list}{list}(input, lat = "latitude", lon = "longitude",
  polygon = NULL)
}
\arguments{
\item{input}{Input list, data.frame, or spatial class. Inputs can also be dplyr \code{tbl_df}
class since it inherits from \code{data.frame}.}

\item{polygon}{If a polygon is defined in a data.frame, this is the column that defines the
grouping of the polygons in the \code{data.frame}}

\item{lat}{Latitude name. Default: latitude}

\item{lon}{Longitude name. Default: longitude}
}
\description{
Convert many input types with spatial data to geojson specified as a list
}
\details{
This function creates a geojson structure as an R list; it does not write a file
using \code{rgdal} - see \code{\link{to_geojson}} for that.
}
\examples{
\dontrun{
library('maps')
data(us.cities)
(res <- to_geo_list(us.cities[1:2,], lat='lat', lon='long'))
as.json(res)

# polygons
library('ggplot2')
states <- map_data("state")
head(states)
## make list for input to e.g., rMaps
res <- to_geo_list(input=states, lat='lat', lon='long', group='group')

## From a list
mylist <- list(list(latitude=30, longitude=120, marker="red"),
               list(latitude=30, longitude=130, marker="blue"))
to_geo_list(mylist)

# From a numeric vector of length 2
vec <- c(32.45,-99.74)
to_geo_list(vec)

# From SpatialPolygons class
library('sp')
poly1 <- Polygons(list(Polygon(cbind(c(-100,-90,-85,-100),
   c(40,50,45,40)))), "1")
poly2 <- Polygons(list(Polygon(cbind(c(-90,-80,-75,-90),
   c(30,40,35,30)))), "2")
sp_poly <- SpatialPolygons(list(poly1, poly2), 1:2)
to_geo_list(sp_poly)

# From SpatialPolygonsDataFrame class
sp_polydf <- as(sp_poly, "SpatialPolygonsDataFrame")
to_geo_list(input = sp_polydf)
}
}

