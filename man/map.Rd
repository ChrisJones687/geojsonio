% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/map.R
\name{map}
\alias{map}
\alias{map.SpatialPolygons}
\alias{map.SpatialPolygonsDataFrame}
\alias{map.character}
\alias{map.location}
\title{Make an interactive map using the cartographer package}
\usage{
map(...)

\method{map}{character}(data, ...)

\method{map}{location}(data, tile = TRUE, region = NULL, bbox = NULL,
  width = NULL, height = NULL, provider = "stamen", path = "toner-lite",
  tile_label = "Tiles", geojson_label = "GeoJSON", tile_visible = TRUE,
  geojson_visible = tile_visible, clickable = FALSE, fill = "lightblue",
  stroke = "black", opacity = 0.5, ...)

\method{map}{SpatialPolygons}(data, tile = TRUE, region = NULL,
  bbox = NULL, width = NULL, height = NULL, provider = "stamen",
  path = "toner-lite", tile_label = "Tiles", geojson_label = "GeoJSON",
  tile_visible = TRUE, geojson_visible = tile_visible, clickable = FALSE,
  fill = "lightblue", stroke = "black", opacity = 0.5, ...)

\method{map}{SpatialPolygonsDataFrame}(data, tile = TRUE, region = NULL,
  bbox = NULL, width = NULL, height = NULL, provider = "stamen",
  path = "toner-lite", tile_label = "Tiles", geojson_label = "GeoJSON",
  tile_visible = TRUE, geojson_visible = tile_visible, clickable = FALSE,
  fill = "lightblue", stroke = "black", opacity = 0.5, ...)
}
\arguments{
\item{...}{Further args. Ignored.}

\item{data}{Input, one of class SpatialPolygons, SpatialPolygonsDataFrame, or file path}

\item{tile}{(logical) Whether to plot tile layer or not. Default: TRUE}

\item{region}{The region to which the map should be centered. This region can be one of
several types. Passing a two-letter ISO country code will center the map on that country.
The string "United States" will center the map on the continental United States of America.
You can also use the names of continents. The region is case insensitive.}

\item{bbox}{(list) Instead of a region, you can center the map on a bounding box. The bounding
box be specified in decimal degrees of latitude and longitude and should have the
following format:  \code{list(c(long1, lat1), c(long2, lat2))}}

\item{width}{The width of the map in pixels.}

\item{height}{The height of the map in pixels.}

\item{provider}{(character) map provider Default: stamen}

\item{path}{(character) Default: toner-lite}

\item{tile_label}{(character) Tile label Default: Tiles}

\item{geojson_label}{(character) Geojson label Default: GeoJSON}

\item{tile_visible}{(logical) Should tile layer be visible on initial load Default: TRUE}

\item{geojson_visible}{(logical) Should geojson layer be visible on initial load Default: TRUE}

\item{clickable}{(logical) Whether should be clickable or not Default: FALSE}

\item{fill}{(character) Fill color Default: lightblue}

\item{stroke}{(character) Stroke color Default: black}

\item{opacity}{(character) Opacity Default: 0.5}
}
\description{
Make an interactive map using the cartographer package
}
\examples{
\donttest{
# From SpatialPolygons class
library('sp')
poly1 <- Polygons(list(Polygon(cbind(c(-100,-90,-85,-100),
   c(40,50,45,40)))), "1")
poly2 <- Polygons(list(Polygon(cbind(c(-90,-80,-75,-90),
   c(30,40,35,30)))), "2")
sp_poly <- SpatialPolygons(list(poly1, poly2), 1:2)
map(sp_poly)

# From SpatialPolygonsDataFrame class
sp_polydf <- as(sp_poly, "SpatialPolygonsDataFrame")
map(sp_polydf)

# From a file
land <- system.file("extdata", "land.geojson", package = "cartographer")
map(land, tile=FALSE, geojson_label = "land")
map(as.location(land), tile=FALSE, geojson_label = "land")

# Historical usa boundaries
library("USAboundaries")
us_sp <- us_boundaries(as.Date("1800-01-01"))
map(us_sp, region = "United States", geojson_label = "US 1800", clickable = TRUE)

# NaturalEarth layers
library("curl")
bs <- "https://github.com/nvkelso/natural-earth-vector/blob/master/110m_physical/\%s?raw=true"
files <- paste0("ne_110m_glaciated_areas.", c("shx","shp", "dbf", "prj"))
for(i in seq_along(files)){
   curl_download(sprintf(bs, files[i]), destfile=files[i])
}
out <- geojson_read(files[2])
map(out, tile=FALSE)
}
}

